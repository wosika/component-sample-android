apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.versions["compileSdkVersion"]
    buildToolsVersion rootProject.ext.versions["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.dosmono.sanya.component"
        minSdkVersion rootProject.ext.versions["minSdkVersion"]
        targetSdkVersion rootProject.ext.versions["targetSdkVersion"]
        versionCode rootProject.ext.versions["versionCode"]
        versionName rootProject.ext.versions["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //宿主项目中判断组件是否需要独立运行
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(path: ':module-main')
        runtimeOnly project(path: ':module-sub')
        runtimeOnly project(path: ':module-talk')
    }
    implementation project(path: ':lib-component')
    kapt 'com.alibaba:arouter-compiler:1.2.2'

}
