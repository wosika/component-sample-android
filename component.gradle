//def componentName = project.getName().startsWith("module_") ? project.getName().substring(0, "module_".length()) :
if (isBuildModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.versions["compileSdkVersion"]
    buildToolsVersion rootProject.ext.versions["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.versions["minSdkVersion"]
        targetSdkVersion rootProject.ext.versions["targetSdkVersion"]
        versionCode rootProject.ext.versions["versionCode"]
        versionName rootProject.ext.versions["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            if (isBuildModule.toBoolean()) {
                shrinkResources true
            }
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            /*   if (isBuildModule.toBoolean()) {
                   manifest.srcFile 'src/main/debug/AndroidManifest.xml'
               } else {
                   manifest.srcFile 'src/main/release/AndroidManifest.xml'
               }*/

            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }


}

kapt {
    arguments {
        //arguments = [AROUTER_MODULE_NAME, project.getName()]
        arg("AROUTER_MODULE_NAME", project.getName())
        includeCompileClasspath true
    }
}

dependencies {
    if (isBuildModule.toBoolean()) {
        // annotationProcessor rootProject.ext.dependencies["ARouter-compiler"]
        kapt rootProject.ext.dependencies["ARouter-compiler"]
    } else {
        compileOnly rootProject.ext.dependencies["ARouter-compiler"]
    }
}